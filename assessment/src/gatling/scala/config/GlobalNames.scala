package config

object GlobalNames {

  //input params for the tests
  val BODY = "BODY";
  val BODYPATH = "bodyPath";
  val PARAM = "param";

  //SUBFIELD MGMT
  val CREATE_SUBFIELD_RESPONSE = "CREATE_SUBFIELD_RESPONSE";
  val CREATE_SUBFIELD_SUBFIELDS_UUID_ARRAY = "CREATE_SUBFIELD_SUBFIELDS_UUID_ARRAY";
  val SUBFIELDS_UUID_ARRAY = "SUBFIELDS_UUID_ARRAY";
  val SUBFIELD_UUID = "SUBFIELD_UUID";
  val GET_SUBFIELD_RESPONSE = "GET_SUBFIELD_RESPONSE";

  //FIELD MGMT
  val CREATE_FIELD_RESPONSE = "CREATE_FIELD_RESPONSE";
  val FIELD_UUID = "FIELD_UUID";
  val GET_FIELD_RESPONSE = "GET_FIELD_RESPONSE";

  val GET_FIELDS_RESPONSE = "GET_FIELDS_RESPONSE";
  val GET_FIELDS_RESPONSE_ARRAY = "GET_FIELDS_RESPONSE_ARRAY";
  val UPDATE_FIELD_RESPONSE = "UPDATE_FIELD_RESPONSE"

  //values for assertions inside GetField test
  val FIELDNAME = "FIELDNAME";
  val SUBFIELDNAME = "SUBFIELDNAME";
  val LIMIT = "LIMIT";
  val POLYGON_COORDINATES = "POLYGON_COORDINATES";
  val AREA = "AREA";

  //values for assertions inside Create subfield test
  val REFERRENCE_AREA_4326 = "referenceArea4326";
  val REFERRENCE_AREA_3857 = "referenceArea3857";

  //UUID REGEX
  val UUID_REGEX = "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}";
  val NORTH = "NORTH";
  val SOUTH = "SOUTH";
  val EAST = "EAST";
  val WEST = "WEST";
  val UUID_EVENT = "UUID_EVENT";

  //values for assertions inside Get subfield test
  val TIMEZONE = "TIMEZONE";
  val FEATURE = "Feature";
  val FEATURECOLLECTION = "FeatureCollection";

  val BROKER_TYPE = "BROKER_TYPE";

  val POLYGON = "Polygon";
  val RESPONSECODE = "RESPONSECODE";

  // profile assertions
  val GET_FIELD_EVENT_RESPONSE = "GET_FIELD_EVENT_RESPONSE";
  val GET_FIELD_STATE_RESPONSE = "GET_FIELD_STATE_RESPONSE";
  val GET_EVENTS_RESPONSE = "GET_EVENTS_RESPONSE";
  val GET_EVENTS_UUIDS_RESPONSE = "GET_EVENTS_UUIDS_RESPONSE";
  val GET_CONFIG_RESPONSE = "GET_CONFIG_RESPONSE";

  val TYPE = "CATEGORYTYPE";
  val categoryDate = "categoryDate";
  val cropType = "cropType";
  val SUBFIELDSLIST = "SUBFIELDSLIST";

  //Message Assertion
  val MESSAGE = "MESSAGE";
  val ERRORMESSAGE = "ERRORMESSAGE";
  val TEXT = "TEXT";
  val READY = "READY";

  //Layers Assertion
  val LAYER = "LAYER";
  val STATUS = "STATUS";
  val Date = "DATE";
  val QueryDate = "QueryDate";
  val FIELD_PROFILE = "fieldProfile";
  val STATUS_SCHEDULED = "STATUS_SCHEDULED";
  val STATUS_COMPUTING = "STATUS_COMPUTING";
  val STATUS_READY = "STATUS_READY";
  val ACTUAL_LAYER_STATUS = "ACTUAL_LAYER_STATUS";

  val POST_LAYER_STATUS_RESPONSE = "POST_LAYER_STATUS_RESPONSE";
  val GET_LAYERS_RESPONSE = "GET_LAYERS_RESPONSE";
  val GET_LAYER_STATUS_RESPONSE = "GET_LAYER_STATUS_RESPONSE";
  val GET_LAYER_INFO_RESPONSE = "GET_LAYER_INFO_RESPONSE";
  val GET_ALL_STATUS_FIELD_RESPONSE = " GET_ALL_STATUS_FIELD_RESPONSE";
  val GET_SUBFIELDS_BY_STATUS_RESPONSE = "GET_SUBFIELDS_BY_STATUS_RESPONSE";
  val GET_LAYER_DATA_RESPONSE = "GET_LAYER_DATA_RESPONSE";

  val HDSMLAYER = "HDSM";
  val GDDLAYER = "GDD";
  val YIELDLAYER = "YIELD";
  val YIELD2LAYER = "YIELD-2";
  val DISEASELAYER = "DISEASE";
  val NDVISLAYER = "NDVIS";
  val HDSMTYPE = "HDSM";
  val GDDTYPE = "GDD";
  val YIELDTYPE = "YIELD";
  val DISEASETYPE = "DISEASE";
  val NDVISTYPE = "NDVI";

  val LAYERTYPE = "LAYERTYPE"
  val PROVIDER = "PROVIDER"
  val CROPSLIMIT = "CROPSLIMIT"

  val IBMPROVIDER = "IBM";
  val ITKPROVIDER = "ITK";

  val VERSION = "VERSION"
  val MODELVERSION = "MODELVERSION"
  val VERSION1 = "1.0";
  val VERSION2 = "1.1";

  val SOYBEAN = "SOYBEAN";
  val CORN = "CORN";

  //GDD Assertions
  val LATITUDE = "LATITUDE"
  val LONGITUDE = "LONGITUDE"
  val MINTEMP = "MINTEMP"
  val MAXTEMP = "MAXTEMP"
  val MINTHRESHOLD = "MINTHRESHOLD"
  val MAXTHRESHOLD = "MAXTHRESHOLD"
  val PRECIPITATION = "PRECIPITATION"
  val TOTALGDD = "TOTALGDD"
  val MATURITYPERCENT = "MATURITYPERCENT"
  val TOTALPRECIP = "TOTALPRECIP"
  val GDDAMOUNT = "GDDAMOUNT"
  val GDDTOTALTODATE = "GDDTOTALTODATE"
  val PRECIPAMOUNT = "PRECIPAMOUNT"
  val LASTMODIFIED = "LASTMODIFIED"

  val GET_REGISTRY_RESPONSE = "GET_REGISTRY_RESPONSE"

}

